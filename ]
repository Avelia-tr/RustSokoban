use std::{
    error::Error,
    fs::{self, File},
    io::{BufRead, BufReader},
    str::FromStr,
    string, usize,
};

use crate::Board;

// we take a file as arg
// we parse it
// TODO: decide file structure
//
//size of the sprites
//s:<number>
//
//player
//p:<string>
//
//crate
//c:<string>
//
//win
//x:<string>
//
//wall
//w:<string>
//
//separation
//<
//
//board
//
// return a board
//
// exemple of file
//s:2
//p:()
//c:[]
//x:++
//w:==
//<
//==,==,==,==
//==,(),[],==
//==,  ,++,==
//==,==,==,==

struct TemporaryBoard {
    player: String,
    wall: String,
    objective: String,
    crates: String,
}

enum ParsingError {
    InvalidSize,
    characterLacking,
    BoardNotFound,
}

fn parse_line<T: FromStr>(file: &mut BufReader<File>, pattern: &str) -> T {
    file.lines()
        .filter_map(|f| {
            f.expect("idk")
                .trim()
                .strip_prefix(pattern)
                .map(|x| x.to_owned())
        })
        .next()
        .and_then(|s| s.parse::<T>().ok())
        .expect("non valide size")
}

fn parse_sprite(file: &mut BufReader<File>, size: usize) -> TemporaryBoard {
    let l_player = parse_line::<String>(file, "p:").split_off(size);
    let l_wall = parse_line::<String>(file, "w:").split_off(size);
    let l_objective = parse_line::<String>(file, "o:").split_off(size);
    let l_crates = parse_line::<String>(file, "c:").split_off(size);
    return TemporaryBoard {
        player: l_player,
        wall: l_wall,
        objective: l_objective,
        crates: l_crates,
    };
}

fn parse_board(file: &mut BufReader<File>, tempboard: TemporaryBoard) -> Result<Board> {
    let mut iterline = file.lines();

    loop {
        let current_line_result = iterline.next();

        if current_line_result.is_none() {
            return Err("board not found");
        }

        if current_line_result?.find(|p_char| p_char == "<").is_some() {
            break;
        }
    }
    Err("not implemtend")
}

#[allow(dead_code)]
pub fn parse_file(file_path: &str) -> Result<Board, String> {
    let file = File::open(file_path);

    if file.is_err() {
        return Err("can't read file".to_string());
    }

    let mut reader = BufReader::new(file.unwrap());

    let size: usize = parse_line::<usize>(&mut reader, "s:");

    let temp_board_holder = parse_sprite(&mut reader, size);

    Err("not implemented".to_string())
}

//
//
//
//
//
